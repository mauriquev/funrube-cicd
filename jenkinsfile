pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-credentials')
        AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
        AWS_REGION = 'us-east-1'
        LAMBDA_FUNCTION_NAME = 'EmailRetrival' // name of the lambda function
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-token',
                    url: 'https://github.com/mauriquev/funtube-cicd.git'
            }
        }
        stage('Check Changes') {
            steps {
                script {
                    changes = checkout([$class: 'GitSCM']).pollingBaseline()
                    if (changes) {
                        echo 'Changes detected. Proceeding with deployment...'
                        sh "git diff --name-only HEAD^ HEAD | grep lambda_function.py"
                        def hasChanges = sh(script: "git diff --name-only HEAD^ HEAD | grep lambda_function.py", returnStatus: true)
                        if (hasChanges == 0) {
                            echo 'Changes found in lambda_function.py. Proceeding with deployment...'
                        } else {
                            echo 'No changes found in lambda_function.py. Skipping deployment...'
                            return
                        }
                    } else {
                        echo 'No changes detected. Skipping deployment...'
                        return
                    }
                }
            }
        }
        stage('Test') {
            steps {
                sh 'python -m unittest discover tests'
            }
        }
        stage('Deploy to AWS Lambda') {
            steps {
                sh 'pip install --user awscli'
                sh 'aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://path/to/your/lambda/deployment/package.zip'
            }
        }
    }
}
